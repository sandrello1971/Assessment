// src/pages/CompanyForm.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

interface CompanyData {
  azienda_nome: string;
  settore: string;
  dimensione: string;
  referente: string;
  email: string;
  user_id?: string;
  company_id?: number;
}

const CompanyForm: React.FC = () => {
  const [formData, setFormData] = useState<CompanyData>({
    azienda_nome: '',
    settore: '',
    dimensione: '',
    referente: '',
    email: '',
    user_id: '',
    company_id: undefined
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'company_id' ? (value ? Number(value) : undefined) : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.azienda_nome.trim()) {
      setError('Il nome dell\'azienda Ã¨ obbligatorio');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      // Crea la sessione con i dati azienda
      const response = await axios.post('/api/assessment/session', {
        ...formData,
        user_id: formData.user_id || undefined,
        company_id: formData.company_id || undefined
      });
      
      const sessionId = response.data.id;
      
      // Naviga al form di assessment passando l'ID della sessione
      navigate(`/assessment/${sessionId}`);
      
    } catch (error: any) {
      console.error('Errore nella creazione della sessione:', error);
      setError(error.response?.data?.detail || 'Errore durante la creazione della sessione');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-center mb-6 text-gray-800">
          Dati Azienda
        </h2>
        
        {error && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Azienda *
            </label>
            <input
              type="text"
              name="azienda_nome"
              value={formData.azienda_nome}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Inserisci il nome dell'azienda"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Settore
            </label>
            <select
              name="settore"
              value={formData.settore}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Seleziona settore</option>
              <option value="Manifatturiero">Manifatturiero</option>
              <option value="Automotive">Automotive</option>
              <option value="Alimentare">Alimentare</option>
              <option value="Tessile">Tessile</option>
              <option value="Chimico">Chimico</option>
              <option value="Farmaceutico">Farmaceutico</option>
              <option value="Elettronico">Elettronico</option>
              <option value="Metalmeccanico">Metalmeccanico</option>
              <option value="Altro">Altro</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Dimensione Azienda
            </label>
            <select
              name="dimensione"
              value={formData.dimensione}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Seleziona dimensione</option>
              <option value="Micro (1-9 dipendenti)">Micro (1-9 dipendenti)</option>
              <option value="Piccola (10-49 dipendenti)">Piccola (10-49 dipendenti)</option>
              <option value="Media (50-249 dipendenti)">Media (50-249 dipendenti)</option>
              <option value="Grande (250+ dipendenti)">Grande (250+ dipendenti)</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Referente
            </label>
            <input
              type="text"
              name="referente"
              value={formData.referente}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Nome del referente"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="email@azienda.com"
            />
          </div>

          <div className="border-t pt-4">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Opzionali</h3>
            
            <div className="mb-3">
              <label className="block text-sm text-gray-600 mb-1">
                ID Utente
              </label>
              <input
                type="text"
                name="user_id"
                value={formData.user_id}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="ID utente (opzionale)"
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">
                ID Azienda esistente
              </label>
              <input
                type="number"
                name="company_id"
                value={formData.company_id || ''}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="ID azienda esistente (opzionale)"
              />
            </div>
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isSubmitting ? 'Creazione in corso...' : 'Inizia Assessment'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <button
            onClick={() => navigate('/dashboard')}
            className="text-blue-600 hover:text-blue-800 text-sm underline"
          >
            Torna alla Dashboard
          </button>
        </div>
      </div>
    </div>
  );
};

export default CompanyForm;
